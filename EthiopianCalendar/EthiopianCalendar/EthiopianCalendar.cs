using System;
using System.Globalization;

namespace EthiopianCalendar
{
    public class EthiopianCalendar : Calendar
    {
        /// <summary>
        /// Offset is generated by calculating the number of secs until 1575-02-08
        /// 1572-02-08 is the same as the start of the gregorian calendar 1582-10-15
        /// </summary>
        private const double Offset = 49674816000;
        private DateTime GregorianStartDate;
        public EthiopianCalendar()
        {
            GregorianStartDate = new DateTime(1582, 10, 15, 0, 0, 0, DateTimeKind.Utc);
        }

        public override CalendarAlgorithmType AlgorithmType
        {
            get { return CalendarAlgorithmType.LunisolarCalendar; }
        }

        public override int[] Eras
        {
            get { return new int[] { 0, 1 }; }
        }

        public override DateTime MinSupportedDateTime
        {
            get { return new DateTime(614, 7, 23, 0, 0, 0, this); }
        }

        public override DateTime MaxSupportedDateTime
        {
            get { return new DateTime(2199, 12, 31, 23, 59, 59, this); }
        }

        public override DateTime AddMonths(DateTime time, int months)
        {
            int month = time.Month + months;
            month = month % 13;
            int year = time.Year + month / 13;

            return new DateTime(year, month, time.Day, this);
        }

        public override DateTime AddYears(DateTime time, int years)
        {
            return new DateTime(time.Year + years, time.Month, time.Day, this);
        }

        public override int GetDayOfMonth(DateTime time)
        {
            var secs = (time - GregorianStartDate).TotalSeconds;
            var etSecs = Offset + secs;

            var days = etSecs / 86400;

            //number of days every four years 365 * 4 + 1 = 1461
            int years = 4 * (int)Math.Floor(days / 1461);
            var remainder = days - (years * 1461 / 4);

            var day = 0;
            if (remainder < 360)
            {
                day = (int)Math.Floor(remainder) % 30;
            }
            else if (remainder < 365)
            {
                day = (int)Math.Floor(remainder) - 360;
            }
            else if (remainder < 725)
            {
                day = (int)Math.Floor(remainder - 365) % 30;
            }
            else if (remainder < 730)
            {
                day = (int)Math.Floor(remainder) - 725;
            }
            else if (remainder < 1090)
            {
                day = (int)Math.Floor(remainder - 730) % 30;
            }
            else if (remainder < 1096)
            {
                day = (int)Math.Floor(remainder) - 1090;
            }
            else if (remainder < 1456)
            {
                day = (int)Math.Floor(remainder - 1096) % 30;
            }
            else
            {
                day = (int)Math.Floor(remainder) - 1456;
            }
            return day + 1;
        }

        public override DayOfWeek GetDayOfWeek(DateTime time)
        {
            return time.DayOfWeek;
        }

        public override int GetDayOfYear(DateTime time)
        {
            return time.DayOfYear;
        }

        public override int GetDaysInMonth(int year, int month, int era)
        {
            return (month < 13 ? 30 : (this.IsLeapYear(year) ? 6 : 5));
        }

        public override int GetDaysInYear(int year, int era)
        {
            return (this.IsLeapYear(year) ? 366 : 365);
        }

        public override int GetEra(DateTime time)
        {
            return 1;
        }

        public override int GetMonth(DateTime time)
        {
            var secs = (time - GregorianStartDate).TotalSeconds;
            var etSecs = Offset + secs;

            var days = etSecs / 86400;

            //number of days every four years 365 * 4 + 1 = 1461
            int years = 4 * (int)Math.Floor(days / 1461);
            var remainder = days - (years * 1461 / 4);

            var month = 0;
            if (remainder < 365)
            {
                month = (int)Math.Floor(remainder / 30);
            }
            else if (remainder < 730)
            {
                month = (int)Math.Floor((remainder - 365) / 30);
            }
            else if (remainder < 1096)
            {
                month = (int)Math.Floor((remainder - 730) / 30);
            }
            else
            {
                month = (int)Math.Floor((remainder - 1096) / 30);
            }
            return month + 1;
        }

        public override int GetMonthsInYear(int year, int era)
        {
            return 13;
        }

        public override int GetYear(DateTime time)
        {
            var secs = (time - GregorianStartDate).TotalSeconds;
            var etSecs = Offset + secs;

            var days = etSecs / (double)86400;

            //number of days every four years 365 * 4 + 1 = 1461
            int year = 4 * (int)Math.Floor(days / 1461);
            var remainder = days - (year * 1461 / 4);

            if (remainder < 365)
            {
                year += 1;
            }
            else if (remainder < 730)
            {
                year += 2;
            }
            else if (remainder < 1096)
            {
                year += 3;
            }
            else
            {
                year += 4;
            }
            return year;
        }

        public override bool IsLeapDay(int year, int month, int day, int era)
        {
            return (month == 13 && day == 6);
        }

        public override bool IsLeapMonth(int year, int month, int era)
        {
            return (year % 4 == 3 && month == 13);
        }

        public override bool IsLeapYear(int year, int era)
        {
            return (year % 4 == 3);
        }

        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)
        {
            double y = year - 1;
            double m = month - 1;
            double d = day - 1;

            double msecs = (((y * 365) + Math.Floor(y / 4) + ((y % 4) == 3 ? 1 : 0) + (m * 30) + d) * 86400000) +
               (hour * 3600000) + (minute * 60000) + (second * 1000) + millisecond - (Offset * 1000);

            return GregorianStartDate.AddMilliseconds(msecs);
        }
    }
}
